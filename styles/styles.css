code {
    display: block;
    background-color: #ECECEC;
}

/* I'm not going to lie, I'm still very confused on how to position 
CSS background images and however the heck I managed to pull the text art 
off.*/

#caps-logo-1 {
    background-image: url(../images/weagle.png);
    background-size: 4.5%;
    background-repeat: space;
    /* I believe background-repeat: space; ensures the image repeats
    in an evenly-spaced manner */
    background-position: center;
    filter: drop-shadow(1mm 2mm 1mm rgba(0, 0, 30, 0.57));}

#caps-logo-2 {
background-image: url(../images/weagle.png);
background-size: cover;
/* background-size: contain; */
background-repeat: no-repeat;
background-position: center;
background-clip: text;
-webkit-background-clip: text;
color: transparent;
background-color: rgba(171, 171, 171, 0.492);
font-size: 9px;
font-weight: bolder;
font-variant-caps: all-small-caps;
font-family: Arial, Helvetica, sans-serif;

}

#logo {
    width: 100px;
    height: 250px;
}

/* CSS example for MDN guide on CSS begins here. */
/* COMMENTING OUT THE BOXES I MADE BY FIDDLING WITH GRIDS FOR NOW */

/* .inline-flex-group {
    display: inline-flex;
}

/* .block-group {
    /* Using display: inline-flex for the .inline-group class vs display: block for this
    class (.block-group) affects the layout of the content in the box--in other words, 
    using the block layout causes the images to be aligned in a single column rather than 
    a row. I wonder why this is? */
/*  display: block;
    /* Is display: flex equivalent to display: block-flex (note: the latter doesn't actually
    function as a valid property)? If so, then it negates my previous comment--if you change
    display: block in this declaration to display: flex, the royal blue squares will also be
    arranged in a row, similarly to the light blue ones. */
/*  }

/* .grid-group {
    display: grid;
    /* Not sure if grids are inline or block level elements. Or perhaps neither? */
/*    grid-template-columns: repeat(3, 10px);
    /* Makes 3 columns with each track (space between two adjacent grid lines)
    measuring 10px */
/*    grid-template-rows: repeat(3, 0);
    /* Makes 3 rows with each track (space between two adjacent grid lines)
    measuring the second value. 
    
    If you change the second value to anything above 0, the grid items will get out 
    of alignment on the X-axis. I wonder if the same would happen on the y-axis if 
    the grid-template-columns repeat property's second value was 0px and the 
    grid-template-rows repeat property's second value was greater than 0px? */
/*    column-gap: 75px;
    /* Makes a 75px gutter (aka gap) between row columns. Not sure why
    row-gap property isn't working. There is also a gap property. */
/*    margin: 25 100;
    /* top and bottom margins are 25px; left and right margins are 100px */
/* }

.box-lightblue-1 {
    /* I intend to keep the display mode set to block, 
    so I don't need to set it in the CSS since div elements 
    are block level elements by default */
/*    width: 20px;
    height: 20px;    
    padding: 20px;
    border: 5px solid lightblue;
    background-color: lightblue;
    transform: rotate(25deg);
}

.box-navyblue-1 {
    width: 30px;
    height: 30px;
    transform: skewY(-7deg);
    border: 2px solid navy;
    background-color: navy;
}

.box-navyblue-borderonly-1 {
    width: 30px;
    height: 30px;
/* transform: translateX(-15px); */
/* transform: skewY(7deg); */
    /* Try placing the skewY declaration before the translateX one--
    it's a good example of how CSS prioritizes markup written last.
    In this example, this means the skewY property will override
    the transformX property since the skewY property is written
    later in the declaration. */
/*    transform: translateX(40px) skewY(7deg);
    /* To use multiple transform properties in the same declaration
    without override as experienced in the commented out section above,
    you must place the transform properties on the same line of markup */
/*    border: 2px solid navy;
}

.box-royalblue-1 {
    width: 20px;
    height: 20px;
    padding: 0;    
    margin: 20px;
    border: 5px solid royalblue;
    background-color: royalblue;
}

.left-top {
    margin-left: 20px;
    margin-top: 20px;
    margin-bottom: 20px;
}

.middle-top {
    margin-left: 20px;
    margin-top: 20px;
    margin-bottom: 20px;
}

.right-top {
    margin-left: 20px;
    margin-top: 20px;
}

.right-top {
    margin-left: 20px;
    margin-top: 20px;
}
*/

.seagreen-box {
    display: inline-block;
    background-color: lightseagreen;
    width: 350px;
    height: 350px;
    /* In general, use margins when you're adjusting the spacing of an element in relation to 
    another element (i.e a div in relation to another div on the page), and padding when you're 
    adjusting the look of an individual element (i.e the amount of pixels between the edge of 
    a div and the text within it). via Google Search */
    margin-left: 45px;
    margin-right: 45px;
    margin-top: 45px;
    border: 12px darkslategrey solid;
    padding-left: 30px;
    padding-right: 30px;
    padding-top: 30px; 
}

.seagreen-box-text {
    font-family:Arial, Helvetica, sans-serif;
    font-size: 24px;
    font-weight: bolder;
    font-style: oblique;
    color: white;
}

.maroon-box {
    display: inline-block;
    width: 150px;
    height: 150px;
    background-color: maroon;
    border-radius: 150px;
    border-style: groove;
    border-width: 20px;
    border-color: red;
    border-inline-start-style: outset;
    border-inline-end-style: outset;
}

.right-top {
    margin-left: 20px;
    margin-top: 20px;
}

/* Borders and backgrounds */
.gradient-a {
    background-image: linear-gradient(27deg, rgba(197, 77, 10, 0.15) 12%, rgba(127, 26, 27, 0.5) 52%, rgba(4, 72, 172, 0.15) 80%);
    background-position: center;
}

.gradient-b {
    background-image: radial-gradient(circle, rgba(252, 235, 107, .75) 3%, rgba(121, 200, 121, 0.6) 9%)
}

.caps-logo-test-1 {
    background-image: url(../images/weagle.png);
    background-size: 2.5%;
    background-repeat: repeat-y;
    background-position: top left;
    background-attachment: local;
}

.box-border-radius {
  border: 5px solid rebeccapurple;
  border-radius: 2em;
  border-top-right-radius: 10% 30%;
}

/* Units and values */
table {
    border-collapse: collapse;
    border: 2px solid lightgray;
}

td, th {
    border: 1px solid lightgray
}

.table-lightgray {
    background-color: #ECECEC;
}

.wrapper-1 {
    font-size: 1em;
}

    /* Exploring an example */
    .px-1 {
        width: 200px;
        background-color: lightblue;
        border: 4px blue solid;
    }

    .vw-1 {
        width: 10vw;
        background-color: lightblue;
        border: 4px blue solid;
    }

    .em-1 {
        width: 10em;
        background-color: lightblue;
        border: 4px blue solid;
    }

    /* More on ems and rems */    
    .ems li {
        font-size: 1.3em;
    }
    
    .rems li {
        font-size: 1.3rem;
    }

    /* Percentages */
        /* Example 1 */
        .wrapper-2 {
            width: 400px;
            border: 5px solid rebeccapurple;
        }
        
        .px-2 {
            width: 200px;
        }
        
        .percent-2 {
            width: 40%;
        }
        /* Example 2 */
        .li {
            font-size: 80%;
          }
    /* Numbers */
    .wrapper-3 {
        background-image: url(https://images.pexels.com/photos/255379/pexels-photo-255379.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2);
        background-repeat: no-repeat;
        background-position: bottom left;
        padding: 20px;
    }
    
    .box-3 {
        color: black;
        opacity: 0.46;
        text-align: center;
    }
    
    /* Math functions */
    .wrapper-4 {
        width: 400px;
    }
    
    .box-4 {
        width: calc(20% + 100px);
        background-color: lightblue;
        border: 2px blue solid;

    }

/* Sizing items */

.box-5 {
    border: 5px solid darkblue;
    height: 75px;
    width: 150px;
}

.box-6 {
    border: 5px solid darkblue;
    width: 50%;
}

.box-7 {
    border: 5px solid darkblue;
    width: 300px;
    margin: 10%;
    padding: 10%;
}

.box-8 {
    border: 5px solid darkblue;
    min-height: 75px;
    width: 200px;
}

.box-9 {
    border: 5px solid darkblue;
    width: 200px;
}

.minibox-1 {
    border: 5px solid darkblue;
    width: 50px;
}

.width {
    width: 100%;
}

.max-1 {
    max-width: 75%;
}

.max-2 {
    max-width: 100%;
}

.box-10 {
    border: 5px solid darkblue;
    width: 20vw;
    height: 20vh;
    font-size: 10vh;
}

/* Images, media items, and forms */
.box-11 {
    width: 200px;
    background-color: darkblue;
}

.balloons-jpg-1 {
    max-width: 100%;
}

.box-12 {
    width: 200px;
    height: 200px;
}

img.balloons-jpg-2 {
    height: 100%;
    width: 100%;
}

.balloons-cover {
    object-fit: cover;
}

.balloons-contain {
    object-fit: contain;
}

.balloons-fill {
    object-fit: fill;
}

.wrapper-6 {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 200px 200px;
  gap: 20px;
}

.wrapper-6 > div {
    background-color: rebeccapurple;
    border-radius: .5em;
  }

  input[type="text"],
input[type="email"] {
  border: 2px solid #000;
  margin: 0 0 1em 0;
  padding: 10px;
  width: 100%;
}

input[type="submit"] {
  border: 3px solid #333;
  background-color: #999;
  border-radius: 5px;
  padding: 10px 2em;
  font-weight: bold;
  color: #fff;
}

input[type="submit"]:hover, input[type="submit"]:focus {
  background-color: #333;
}
